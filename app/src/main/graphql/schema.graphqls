# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

# The `BigInt` scalar type represents non-fractional signed whole numeric values.
scalar Long

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  nei: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  nei: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  nei: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  nei: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input LongFilterInput {
  and: [Long]
  or: [Long]
  not: LongFilterInput
  eq: Long
  eqi: Long
  ne: Long
  nei: Long
  startsWith: Long
  endsWith: Long
  contains: Long
  notContains: Long
  containsi: Long
  notContainsi: Long
  gt: Long
  gte: Long
  lt: Long
  lte: Long
  null: Boolean
  notNull: Boolean
  in: [Long]
  notIn: [Long]
  between: [Long]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  nei: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateFilterInput {
  and: [Date]
  or: [Date]
  not: DateFilterInput
  eq: Date
  eqi: Date
  ne: Date
  nei: Date
  startsWith: Date
  endsWith: Date
  contains: Date
  notContains: Date
  containsi: Date
  notContainsi: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  null: Boolean
  notNull: Boolean
  in: [Date]
  notIn: [Date]
  between: [Date]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  nei: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  nei: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  tickets: TicketFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  tickets: [ID]
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  tickets(
    filters: TicketFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TicketRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input ActorFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  movies: MovieFiltersInput
  infor_url: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ActorFiltersInput]
  or: [ActorFiltersInput]
  not: ActorFiltersInput
}

input ActorInput {
  name: String
  avatar: ID
  movies: [ID]
  infor_url: String
}

type Actor {
  name: String!
  avatar: UploadFileEntityResponse
  movies(
    filters: MovieFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): MovieRelationResponseCollection
  infor_url: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ActorEntity {
  id: ID
  attributes: Actor
}

type ActorEntityResponse {
  data: ActorEntity
}

type ActorEntityResponseCollection {
  data: [ActorEntity!]!
  meta: ResponseCollectionMeta!
}

type ActorRelationResponseCollection {
  data: [ActorEntity!]!
}

input CinemaFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  location: StringFilterInput
  screens: ScreenFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [CinemaFiltersInput]
  or: [CinemaFiltersInput]
  not: CinemaFiltersInput
}

input CinemaInput {
  name: String
  location: String
  logo: ID
  screens: [ID]
  publishedAt: DateTime
}

type Cinema {
  name: String
  location: String
  logo: UploadFileEntityResponse
  screens(
    filters: ScreenFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ScreenRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type CinemaEntity {
  id: ID
  attributes: Cinema
}

type CinemaEntityResponse {
  data: CinemaEntity
}

type CinemaEntityResponseCollection {
  data: [CinemaEntity!]!
  meta: ResponseCollectionMeta!
}

input DirectorFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  movies: MovieFiltersInput
  infor_url: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DirectorFiltersInput]
  or: [DirectorFiltersInput]
  not: DirectorFiltersInput
}

input DirectorInput {
  name: String
  avatar: ID
  movies: [ID]
  infor_url: String
  publishedAt: DateTime
}

type Director {
  name: String!
  avatar: UploadFileEntityResponse
  movies(
    filters: MovieFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): MovieRelationResponseCollection
  infor_url: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DirectorEntity {
  id: ID
  attributes: Director
}

type DirectorEntityResponse {
  data: DirectorEntity
}

type DirectorEntityResponseCollection {
  data: [DirectorEntity!]!
  meta: ResponseCollectionMeta!
}

type DirectorRelationResponseCollection {
  data: [DirectorEntity!]!
}

input FoodItemFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  order_items: OrderItemFiltersInput
  price: LongFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [FoodItemFiltersInput]
  or: [FoodItemFiltersInput]
  not: FoodItemFiltersInput
}

input FoodItemInput {
  name: String
  description: String
  image: ID
  order_items: [ID]
  price: Long
}

type FoodItem {
  name: String
  description: String
  image: UploadFileEntityResponse
  order_items(
    filters: OrderItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): OrderItemRelationResponseCollection
  price: Long
  createdAt: DateTime
  updatedAt: DateTime
}

type FoodItemEntity {
  id: ID
  attributes: FoodItem
}

type FoodItemEntityResponse {
  data: FoodItemEntity
}

type FoodItemEntityResponseCollection {
  data: [FoodItemEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_MOVIE_LABEL {
  P
  T18
  T16
  T13
  K
  C
}

enum ENUM_MOVIE_LANGUAGE {
  Afrikaans
  Albanian
  Amharic
  Arabic
  Armenian
  Azerbaijani
  Basque
  Belarusian
  Bengali
  Bosnian
  Bulgarian
  Catalan
  Cebuano
  Chichewa
  Corsican
  Croatian
  Czech
  Danish
  German
  Esperanto
  Estonian
  Persian
  Finnish
  French
  Frisian
  Galician
  Georgian
  Gujarati
  Haitian_Creole
  Hausa
  Hawaiian
  Hebrew
  Hindi
  Hmong
  Hungarian
  Icelandic
  Igbo
  Indonesian
  Irish
  Italian
  Javanese
  Kannada
  Kazakh
  Khmer
  Kinyarwanda
  Kurdish
  Kyrgyz
  Lao
  Latin
  Latvian
  Lithuanian
  Luxembourgish
  Macedonian
  Malagasy
  Malay
  Malayalam
  Maltese
  Maori
  Marathi
  Mongolian
  Burmese
  Nepali
  Norwegian
  Odia
  Pashto
  Polish
  Portuguese
  Punjabi
  Romanian
  Russian
  Samoan
  Scots_Gaelic
  Serbian
  Sesotho
  Shona
  Sindhi
  Sinhala
  Slovak
  Slovenian
  Somali
  Spanish
  Sundanese
  Swahili
  Swedish
  Tagalog
  Tajik
  Tamil
  Tatar
  Telugu
  Thai
  Turkish
  Turkmen
  Uyghur
  Ukrainian
  Urdu
  Uzbek
  Vietnamese
  Welsh
  Xhosa
  Yiddish
  Yoruba
  Zulu
}

enum ENUM_MOVIE_COUNTRY {
  Afghanistan
  Egypt
  Albania
  Algeria
  Andorra
  Angola
  Antigua_and_Barbuda
  Saudi_Arabia
  Argentina
  Armenia
  Australia
  Austria
  Azerbaijan
  India
  Bahamas
  Bahrain
  Bangladesh
  Barbados
  Belarus
  Belize
  Benin
  Bhutan
  Belgium
  Bolivia
  Bosnia_and_Herzegovina
  Botswana
  Portugal
  Brazil
  Brunei
  Bulgaria
  Burkina_Faso
  Burundi
  United_Arab_Emirates
  Cameroon
  Cambodia
  Canada
  Cape_Verde
  Chad
  Chile
  Colombia
  Comoros
  Republic_of_the_Congo
  Democratic_Republic_of_the_Congo
  Dominican_Republic
  Czech_Republic
  Central_African_Republic
  Costa_Rica
  Croatia
  Cuba
  Djibouti
  Dominica
  Denmark
  East_Timor
  Germany
  Ecuador
  El_Salvador
  Eritrea
  Estonia
  Ethiopia
  Fiji
  Gabon
  Gambia
  Georgia
  Ghana
  Grenada
  Guatemala
  Guinea
  Guinea_Bissau
  Equatorial_Guinea
  Guyana
  Netherlands
  Haiti
  South_Korea
  United_States
  Honduras
  Hong_Kong
  Hungary
  Greece
  Iceland
  Indonesia
  Iran
  Iraq
  Ireland
  Israel
  Jamaica
  Jordan
  Kazakhstan
  Kenya
  Kiribati
  Kuwait
  Kyrgyzstan
  Laos
  Latvia
  Lesotho
  Lebanon
  Liberia
  Libya
  Liechtenstein
  Lithuania
  Luxembourg
  Morocco
  Madagascar
  Malawi
  Malaysia
  Maldives
  Mali
  Malta
  Marshall_Islands
  Mauritania
  Mauritius
  Mexico
  Micronesia
  Moldova
  Monaco
  Mongolia
  Montenegro
  Mozambique
  Myanmar
  Norway
  South_Africa
  South_Sudan
  Namibia
  Nauru
  Nepal
  New_Zealand
  Russia
  Japan
  Nicaragua
  Niger
  Nigeria
  Niue
  Oman
  Pakistan
  Palau
  Palestine
  Panama
  Papua_New_Guinea
  Paraguay
  Peru
  France
  Philippines
  Qatar
  Cook_Islands
  Solomon_Islands
  Rwanda
  Saint_Kitts_and_Nevis
  Saint_Lucia
  Saint_Vincent_and_the_Grenadines
  Samoa
  San_Marino
  Sao_Tome_and_Principe
  Senegal
  Serbia
  Seychelles
  Sierra_Leone
  Singapore
  Cyprus
  Slovakia
  Slovenia
  Somalia
  Sri_Lanka
  Sudan
  Suriname
  Eswatini
  Syria
  Tajikistan
  Tanzania
  Spain
  Thailand
  Turkey
  Sweden
  Switzerland
  Togo
  Tonga
  North_Korea
  Trinidad_and_Tobago
  China
  Tunisia
  Turkmenistan
  Tuvalu
  Uganda
  Ukraine
  Uruguay
  Uzbekistan
  Vanuatu
  Vatican
  Venezuela
  Vietnam
  Yemen
  Zambia
  Zimbabwe
}

input MovieFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  duration: IntFilterInput
  description: StringFilterInput
  release_date: DateFilterInput
  actors: ActorFiltersInput
  directors: DirectorFiltersInput
  movie_genres: MovieGenreFiltersInput
  is_showing: BooleanFilterInput
  label: StringFilterInput
  language: StringFilterInput
  country: StringFilterInput
  show_times: ShowTimeFiltersInput
  review: FloatFilterInput
  num_of_reviews: IntFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [MovieFiltersInput]
  or: [MovieFiltersInput]
  not: MovieFiltersInput
}

input MovieInput {
  title: String
  duration: Int
  description: String
  release_date: Date
  poster: ID
  trailer: ID
  actors: [ID]
  directors: [ID]
  movie_genres: [ID]
  is_showing: Boolean
  label: ENUM_MOVIE_LABEL
  language: ENUM_MOVIE_LANGUAGE
  country: ENUM_MOVIE_COUNTRY
  show_times: [ID]
  review: Float
  num_of_reviews: Int
  publishedAt: DateTime
}

type Movie {
  title: String
  duration: Int
  description: String
  release_date: Date
  poster: UploadFileEntityResponse
  trailer: UploadFileEntityResponse
  actors(
    filters: ActorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ActorRelationResponseCollection
  directors(
    filters: DirectorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DirectorRelationResponseCollection
  movie_genres(
    filters: MovieGenreFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): MovieGenreRelationResponseCollection
  is_showing: Boolean
  label: ENUM_MOVIE_LABEL
  language: ENUM_MOVIE_LANGUAGE
  country: ENUM_MOVIE_COUNTRY
  show_times(
    filters: ShowTimeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ShowTimeRelationResponseCollection
  review: Float
  num_of_reviews: Int
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type MovieEntity {
  id: ID
  attributes: Movie
}

type MovieEntityResponse {
  data: MovieEntity
}

type MovieEntityResponseCollection {
  data: [MovieEntity!]!
  meta: ResponseCollectionMeta!
}

type MovieRelationResponseCollection {
  data: [MovieEntity!]!
}

input MovieGenreFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  movies: MovieFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [MovieGenreFiltersInput]
  or: [MovieGenreFiltersInput]
  not: MovieGenreFiltersInput
}

input MovieGenreInput {
  name: String
  movies: [ID]
  publishedAt: DateTime
}

type MovieGenre {
  name: String!
  movies(
    filters: MovieFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): MovieRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type MovieGenreEntity {
  id: ID
  attributes: MovieGenre
}

type MovieGenreEntityResponse {
  data: MovieGenreEntity
}

type MovieGenreEntityResponseCollection {
  data: [MovieGenreEntity!]!
  meta: ResponseCollectionMeta!
}

type MovieGenreRelationResponseCollection {
  data: [MovieGenreEntity!]!
}

input OrderItemFiltersInput {
  id: IDFilterInput
  food_item: FoodItemFiltersInput
  quantity: IntFilterInput
  ticket: TicketFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [OrderItemFiltersInput]
  or: [OrderItemFiltersInput]
  not: OrderItemFiltersInput
}

input OrderItemInput {
  food_item: ID
  quantity: Int
  ticket: ID
}

type OrderItem {
  food_item: FoodItemEntityResponse
  quantity: Int
  ticket: TicketEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderItemEntity {
  id: ID
  attributes: OrderItem
}

type OrderItemEntityResponse {
  data: OrderItemEntity
}

type OrderItemEntityResponseCollection {
  data: [OrderItemEntity!]!
  meta: ResponseCollectionMeta!
}

type OrderItemRelationResponseCollection {
  data: [OrderItemEntity!]!
}

input ScreenFiltersInput {
  id: IDFilterInput
  screen_number: IntFilterInput
  cinema: CinemaFiltersInput
  seats: SeatFiltersInput
  show_times: ShowTimeFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ScreenFiltersInput]
  or: [ScreenFiltersInput]
  not: ScreenFiltersInput
}

input ScreenInput {
  screen_number: Int
  cinema: ID
  seats: [ID]
  show_times: [ID]
  publishedAt: DateTime
}

type Screen {
  screen_number: Int
  cinema: CinemaEntityResponse
  seats(
    filters: SeatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SeatRelationResponseCollection
  show_times(
    filters: ShowTimeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ShowTimeRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ScreenEntity {
  id: ID
  attributes: Screen
}

type ScreenEntityResponse {
  data: ScreenEntity
}

type ScreenEntityResponseCollection {
  data: [ScreenEntity!]!
  meta: ResponseCollectionMeta!
}

type ScreenRelationResponseCollection {
  data: [ScreenEntity!]!
}

input SeatFiltersInput {
  id: IDFilterInput
  seat_row: StringFilterInput
  seat_number: IntFilterInput
  screen: ScreenFiltersInput
  tickets: TicketFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [SeatFiltersInput]
  or: [SeatFiltersInput]
  not: SeatFiltersInput
}

input SeatInput {
  seat_row: String
  seat_number: Int
  screen: ID
  tickets: [ID]
  publishedAt: DateTime
}

type Seat {
  seat_row: String
  seat_number: Int
  screen: ScreenEntityResponse
  tickets(
    filters: TicketFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TicketRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type SeatEntity {
  id: ID
  attributes: Seat
}

type SeatEntityResponse {
  data: SeatEntity
}

type SeatEntityResponseCollection {
  data: [SeatEntity!]!
  meta: ResponseCollectionMeta!
}

type SeatRelationResponseCollection {
  data: [SeatEntity!]!
}

input ShowTimeFiltersInput {
  id: IDFilterInput
  movie: MovieFiltersInput
  screen: ScreenFiltersInput
  show_time: DateTimeFilterInput
  price: LongFilterInput
  tickets: TicketFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ShowTimeFiltersInput]
  or: [ShowTimeFiltersInput]
  not: ShowTimeFiltersInput
}

input ShowTimeInput {
  movie: ID
  screen: ID
  show_time: DateTime
  price: Long
  tickets: [ID]
  publishedAt: DateTime
}

type ShowTime {
  movie: MovieEntityResponse
  screen: ScreenEntityResponse
  show_time: DateTime
  price: Long
  tickets(
    filters: TicketFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TicketRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ShowTimeEntity {
  id: ID
  attributes: ShowTime
}

type ShowTimeEntityResponse {
  data: ShowTimeEntity
}

type ShowTimeEntityResponseCollection {
  data: [ShowTimeEntity!]!
  meta: ResponseCollectionMeta!
}

type ShowTimeRelationResponseCollection {
  data: [ShowTimeEntity!]!
}

input TicketFiltersInput {
  id: IDFilterInput
  show_time: ShowTimeFiltersInput
  seats: SeatFiltersInput
  purchase_time: DateTimeFilterInput
  total: LongFilterInput
  order_items: OrderItemFiltersInput
  users_permissions_user: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [TicketFiltersInput]
  or: [TicketFiltersInput]
  not: TicketFiltersInput
}

input TicketInput {
  show_time: ID
  seats: [ID]
  purchase_time: DateTime
  total: Long
  order_items: [ID]
  users_permissions_user: ID
}

type Ticket {
  show_time: ShowTimeEntityResponse
  seats(
    filters: SeatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SeatRelationResponseCollection
  purchase_time: DateTime
  total: Long
  order_items(
    filters: OrderItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): OrderItemRelationResponseCollection
  users_permissions_user: UsersPermissionsUserEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type TicketEntity {
  id: ID
  attributes: Ticket
}

type TicketEntityResponse {
  data: TicketEntity
}

type TicketEntityResponseCollection {
  data: [TicketEntity!]!
  meta: ResponseCollectionMeta!
}

type TicketRelationResponseCollection {
  data: [TicketEntity!]!
}

union GenericMorph =
  UploadFile
  | UploadFolder
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Actor
  | Cinema
  | Director
  | FoodItem
  | Movie
  | MovieGenre
  | OrderItem
  | Screen
  | Seat
  | ShowTime
  | Ticket

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  actor(id: ID): ActorEntityResponse
  actors(
    filters: ActorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ActorEntityResponseCollection
  cinema(id: ID): CinemaEntityResponse
  cinemas(
    filters: CinemaFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CinemaEntityResponseCollection
  director(id: ID): DirectorEntityResponse
  directors(
    filters: DirectorFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DirectorEntityResponseCollection
  foodItem(id: ID): FoodItemEntityResponse
  foodItems(
    filters: FoodItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): FoodItemEntityResponseCollection
  movie(id: ID): MovieEntityResponse
  movies(
    filters: MovieFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): MovieEntityResponseCollection
  movieGenre(id: ID): MovieGenreEntityResponse
  movieGenres(
    filters: MovieGenreFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): MovieGenreEntityResponseCollection
  orderItem(id: ID): OrderItemEntityResponse
  orderItems(
    filters: OrderItemFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): OrderItemEntityResponseCollection
  screen(id: ID): ScreenEntityResponse
  screens(
    filters: ScreenFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ScreenEntityResponseCollection
  seat(id: ID): SeatEntityResponse
  seats(
    filters: SeatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SeatEntityResponseCollection
  showTime(id: ID): ShowTimeEntityResponse
  showTimes(
    filters: ShowTimeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ShowTimeEntityResponseCollection
  ticket(id: ID): TicketEntityResponse
  tickets(
    filters: TicketFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TicketEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(
    id: ID!
    data: UploadFolderInput!
  ): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createActor(data: ActorInput!): ActorEntityResponse
  updateActor(id: ID!, data: ActorInput!): ActorEntityResponse
  deleteActor(id: ID!): ActorEntityResponse
  createCinema(data: CinemaInput!): CinemaEntityResponse
  updateCinema(id: ID!, data: CinemaInput!): CinemaEntityResponse
  deleteCinema(id: ID!): CinemaEntityResponse
  createDirector(data: DirectorInput!): DirectorEntityResponse
  updateDirector(id: ID!, data: DirectorInput!): DirectorEntityResponse
  deleteDirector(id: ID!): DirectorEntityResponse
  createFoodItem(data: FoodItemInput!): FoodItemEntityResponse
  updateFoodItem(id: ID!, data: FoodItemInput!): FoodItemEntityResponse
  deleteFoodItem(id: ID!): FoodItemEntityResponse
  createMovie(data: MovieInput!): MovieEntityResponse
  updateMovie(id: ID!, data: MovieInput!): MovieEntityResponse
  deleteMovie(id: ID!): MovieEntityResponse
  createMovieGenre(data: MovieGenreInput!): MovieGenreEntityResponse
  updateMovieGenre(id: ID!, data: MovieGenreInput!): MovieGenreEntityResponse
  deleteMovieGenre(id: ID!): MovieGenreEntityResponse
  createOrderItem(data: OrderItemInput!): OrderItemEntityResponse
  updateOrderItem(id: ID!, data: OrderItemInput!): OrderItemEntityResponse
  deleteOrderItem(id: ID!): OrderItemEntityResponse
  createScreen(data: ScreenInput!): ScreenEntityResponse
  updateScreen(id: ID!, data: ScreenInput!): ScreenEntityResponse
  deleteScreen(id: ID!): ScreenEntityResponse
  createSeat(data: SeatInput!): SeatEntityResponse
  updateSeat(id: ID!, data: SeatInput!): SeatEntityResponse
  deleteSeat(id: ID!): SeatEntityResponse
  createShowTime(data: ShowTimeInput!): ShowTimeEntityResponse
  updateShowTime(id: ID!, data: ShowTimeInput!): ShowTimeEntityResponse
  deleteShowTime(id: ID!): ShowTimeEntityResponse
  createTicket(data: TicketInput!): TicketEntityResponse
  updateTicket(id: ID!, data: TicketInput!): TicketEntityResponse
  deleteTicket(id: ID!): TicketEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Change user password. Confirm with the current password.
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
